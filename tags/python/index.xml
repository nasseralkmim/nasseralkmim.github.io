<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Nasser&#39;s personal website</title>
    <link>https://nasseralkmim.github.io/tags/python/</link>
    <description>Recent content in python on Nasser&#39;s personal website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© {year}</copyright>
    <lastBuildDate>Tue, 06 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://nasseralkmim.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jacobi method</title>
      <link>https://nasseralkmim.github.io/notes/jacobi-method/</link>
      <pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/jacobi-method/</guid>
      <description>Introduction  Jacobi method is a standard iterative scheme for solving the linear system Ax=b.
 Basically writes the diagonal product as a function of the non diagonal products.
  Example  Ax=b  From Peter Olver lecture notes.
import numpy as np A = np.array([[3, 1, -1], [1, -4, 2], [-2, -1, 5]]) b = np.array([3, -1, 2]) print(&amp;#34;A:&amp;#34;, A) print(&amp;#34;b:&amp;#34;, b) print(np.linalg.inv(A) @ b) # solving with numpy inverse function  A: [[ 3 1 -1] [ 1 -4 2] [-2 -1 5]] b: [ 3 -1 2] [1.</description>
    </item>
    
    <item>
      <title>Performance de um portfolio</title>
      <link>https://nasseralkmim.github.io/notes/portfolio-performance/</link>
      <pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/portfolio-performance/</guid>
      <description>Introdução  E ai? quanto rendeu seu portfólio? Fácil, $$R_p = V_{final}/V_{inicial} - 1$$ certo? sim, se você investiu em um único aporte. Normalmente, as pessoas fazem vários aportes ao longo do tempo. Então, se você fez um aporte de 1.000,00, e depois fez outro aporte de 1.000,00; o valor final do seu portfólio é 2.000,00. Se usarmos a fórmula acima iremos obter 100% de retorno, isso indica &amp;#34;performance&amp;#34;?</description>
    </item>
    
    <item>
      <title>Finance data in python</title>
      <link>https://nasseralkmim.github.io/notes/finace-python/</link>
      <pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/finace-python/</guid>
      <description>Introdução   Usar biblioteca yahooquery pois parece ser mais completa e melhor que yfinance.
import yahooquery as yf import pandas as pd pd.options.display.float_format = &amp;#39;{:,.2f}&amp;#39;.format import matplotlib import matplotlib.pyplot as plt matplotlib.style.use(&amp;#39;seaborn&amp;#39;)    Preço em tempo real  ticker = yf.Ticker(&amp;#39;EGIE3.SA&amp;#39;) print(ticker.quotes[&amp;#39;EGIE3.SA&amp;#39;][&amp;#39;bid&amp;#39;])  44.13    Histórico da cotação  ticker.history(period=&amp;#39;max&amp;#39;).close.plot(ylabel=&amp;#39;price R$&amp;#39;, xlabel=&amp;#39;date&amp;#39;) ticker.history(start=&amp;#39;2018-09-15&amp;#39;, end=&amp;#39;2018-09-18&amp;#39;).close.plot(ylabel=&amp;#39;price R$&amp;#39;, xlabel=&amp;#39;date&amp;#39;)    Informação sobre empresa  print(ticker.asset_profile)  {&amp;#39;EGIE3.</description>
    </item>
    
    <item>
      <title>Linear algebra change of basis explained using Python</title>
      <link>https://nasseralkmim.github.io/notes/change-of-basis/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/change-of-basis/</guid>
      <description>Motivation   I&amp;#39;m always forgetting about the intuition behind the change of basis in linear algebra. There is a very nice video explaining it on Youtube, but I want the explanation in text format so I can easily refer too when in doubt.
  Change of basis   Let&amp;#39;s say we have two sets of basis vector $\color{blue}{\boldsymbol{b_{i}}}$ and $\color{red}{\boldsymbol{\beta_{i}}}$. The set $\color{blue}{\boldsymbol{b_{i}}}$ defines the original system, the one we start with, and the set $\color{red}{\boldsymbol{\beta_{i}}}$ the transformed system.</description>
    </item>
    
    <item>
      <title>OOP for an Extensible FEM code</title>
      <link>https://nasseralkmim.github.io/notes/oop-fem/</link>
      <pubDate>Thu, 18 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/oop-fem/</guid>
      <description>Introduction   After a solid 2 days of research, multiple articles and thesis, I figured that the whole OOP paradigm might be the best alternative to an extensible fem code.
 The thing is: I need something simple enough so people can learn how the code works only with basic knowledge of the language and the theory.
  The current framework  Top level description   User input as the Mesh file and the Problem parameters.</description>
    </item>
    
    <item>
      <title>Lagrangian duality example using ob-python</title>
      <link>https://nasseralkmim.github.io/notes/lagrange-duality/</link>
      <pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/lagrange-duality/</guid>
      <description>Introduction   This is an example extracted from &amp;#34;An Introduction to Structural Optimization&amp;#34;, I also added a few extra images to clarify some points.
  What is Lagrangian duality?
  Why is it called Lagrangian duality?
    Problem statement   We want to optimize the following convex and separable problem,
 \begin{equation} \mathbb{(P)} \; \begin{cases} \min \limits_{x_1, x_2} (x_1 -3)^2 + (x_2 + 1)^2 \\ s.</description>
    </item>
    
    <item>
      <title>Lagrange multipliers example</title>
      <link>https://nasseralkmim.github.io/notes/lagrange-multiplier/</link>
      <pubDate>Thu, 03 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/lagrange-multiplier/</guid>
      <description>Introduction   This is an experiment with org-mode and ob-python that simulates a notebok environment which mix code, text and math (latex). I am going through example presented in John Kitchin work, which is extremely useful for someone planning on start coding in python for science.  I take no credit from the material presented here, it is a copy with a new format. I am particularly interested in this subject due an ongoing project in structural optimization therefore I will put an effort on detailing some of the method derivation.</description>
    </item>
    
  </channel>
</rss>
