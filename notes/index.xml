<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nasser&#39;s personal website</title>
    <link>https://nasseralkmim.github.io/notes/</link>
    <description>Recent content on Nasser&#39;s personal website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© {year}</copyright>
    <lastBuildDate>Sun, 18 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://nasseralkmim.github.io/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Trilinos notes</title>
      <link>https://nasseralkmim.github.io/notes/trilinos/</link>
      <pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/trilinos/</guid>
      <description>Basics  What is Trilinos?   Object oriented framework for solving math and engineering problems (linear system of equations). Can solve problems up to 2 billion unknowns.
  What packages make Trilinos?  Trilinos is made out of multiple packages. The packages can depend on each other.
 Documentation for each package can be found Packages | Trilinos.
 The packages are divided in core &amp;#34;services&amp;#34;, solvers, methods and discretization.</description>
    </item>
    
    <item>
      <title>QR Decomposition in one image</title>
      <link>https://nasseralkmim.github.io/notes/qr-decomposition/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/qr-decomposition/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Innsbruck - Efficiency and bureaucracy</title>
      <link>https://nasseralkmim.github.io/notes/inn-2-efficiency-and-burocracy/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/inn-2-efficiency-and-burocracy/</guid>
      <description>Efficiency  I was impressed by the efficiency of two particular services that I&amp;#39;ve used. One of which was the supermarket and the other the post mail service.
 The affordable supermarket, Hoffer or Aldi, has impressive operations processes. Primo, they do not unpack all products into shelfs, they just open the boxes and pilled them up. This is way easier and faster than manually remove all items from boxes.</description>
    </item>
    
    <item>
      <title>Jacobi method</title>
      <link>https://nasseralkmim.github.io/notes/jacobi-method/</link>
      <pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/jacobi-method/</guid>
      <description>Introduction  Jacobi method is a standard iterative scheme for solving the linear system $Ax=b$. It is part of what is known as relaxation-based methods, together with Gauss-Seidel.
 The basic idea is to write the diagonal product as a function of off-diagonal ones.
  Ax=b  Take this simple linear system of equations.
import numpy as np A = np.array([[3, 1, -1], [1, -4, 2], [-2, -1, 5]]) b = np.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Notes</title>
      <link>https://nasseralkmim.github.io/notes/cpp-notes/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/cpp-notes/</guid>
      <description>Introduction   These are my notes about C++. Mostly experiments and running examples with org-babel within Emacs.
 If you don&amp;#39;t know about org-mode with org-babel, it is an Emacs package that allows prose and code execution (multiple languages) within the same file. It is extremely powerful and useful as a learning tool and also to create literate programming narratives or prototypes.
  Advice  General    state intent in comments, don&amp;#39;t say what can be stated in code</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Development environment in Emacs</title>
      <link>https://nasseralkmim.github.io/notes/cpp-environment-setup/</link>
      <pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/cpp-environment-setup/</guid>
      <description>Introduction   This set up already starts with wsl (version 2) already installed and emacs as well. Emacs on windows with WSL2 | Nasser&amp;#39;s personal website
 This guide also is helpful to set up emacs for c++ development: Configuring Emacs as a C/C++ IDE - LSP Mode - LSP support for Emacs.
  Emacs  Lsp-mode clangd server   clangd is language server that provides intelligent features to emacs (client) via lsp-mode (client-server application).</description>
    </item>
    
    <item>
      <title>Favorite garments 2021</title>
      <link>https://nasseralkmim.github.io/notes/favorite-garments/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/favorite-garments/</guid>
      <description>Base layer  All good options, get the one on sale. Black or orange for consistency.
Karrimor quarter zip €15,00   Cheapest one, still waiting to check quality. Update: I tested the t-shirt. The quality is ok, good enough to run with.
  Craft CORE gain €35,00    Nike pacer 1/2 zip €40,00      Insulation  Arc&amp;#39;teryx Proton LT €300,00  Best combination of style, quality, warmth and breathability.</description>
    </item>
    
    <item>
      <title>Favorites from IKEA 2021</title>
      <link>https://nasseralkmim.github.io/notes/inn-2-ikea-favorites/</link>
      <pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/inn-2-ikea-favorites/</guid>
      <description>Why Ikea is so good?   The one thing that makes IKEA aesthetics stand out is consistency.
  Bags   The large bag, which costs only 0,79 EUR are good for laundry, groceries, moving things around. It is also good because it packs small and can be easily carried.
 The smaller ones can be used for organizing clothes in the wardrobe and be used as packing cubes when traveling.</description>
    </item>
    
    <item>
      <title>Favorite recipes 2021</title>
      <link>https://nasseralkmim.github.io/notes/minimalist-recipes/</link>
      <pubDate>Sat, 13 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/minimalist-recipes/</guid>
      <description>My favorites recipes with simple and healthy ingredients. Focusing on high volume and low calorie ingredients for maximum satiety.
Chicken and rice stir fry   Ingredients:
  chicken
  rice
  spinach (baby)
  champignon mushroom
  frozen vegetables (red bell pepper, corn, beans, carrots)
  siracha on top
    Curry with rice    same as stir fry</description>
    </item>
    
    <item>
      <title>Innsbruck - First impressions</title>
      <link>https://nasseralkmim.github.io/notes/inn-1-first-impressions/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/inn-1-first-impressions/</guid>
      <description>I recently started my PhD at the University of Innsbruck, and will start share some of my day to day life and work here.
 Innsbruck is the capital of a region called Tirol. It is not a big city, the first thing I noticed when arrived here through the train station is how quick you can get to places with the rail train system.
 The city is very organized, and I was really impressed with the tiny gap between the rail train and the concrete sidewalk.</description>
    </item>
    
    <item>
      <title>Emacs on windows with WSL2</title>
      <link>https://nasseralkmim.github.io/notes/emacs-windows/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/emacs-windows/</guid>
      <description>Introduction   Build emacs inside windows subsystem for linux (wsl). The main advantage is that emacs is considerably faster when using LSP.
  Reference for installation   GitHub - hubisan/emacs-wsl: Install and run emacs with the Windows Subsystem …
  Shortcut  Followed this steps for creating a taskbar shortcut:
  rename .bat to .exe
  right click on the .exe and create the shortcut</description>
    </item>
    
    <item>
      <title>Performance de um portfolio</title>
      <link>https://nasseralkmim.github.io/notes/portfolio-performance/</link>
      <pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/portfolio-performance/</guid>
      <description>Introdução  E ai? quanto rendeu seu portfólio? Fácil, $$R_p = V_{final}/V_{inicial} - 1$$ certo? sim, se você investiu em um único aporte. Normalmente, as pessoas fazem vários aportes ao longo do tempo. Então, se você fez um aporte de 1.000,00, e depois fez outro aporte de 1.000,00; o valor final do seu portfólio é 2.000,00. Se usarmos a fórmula acima iremos obter 100% de retorno, isso indica &amp;#34;performance&amp;#34;?</description>
    </item>
    
    <item>
      <title>Favorite typeface</title>
      <link>https://nasseralkmim.github.io/notes/favorite-typeface/</link>
      <pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/favorite-typeface/</guid>
      <description>Iosevka is currently my favorite typeface, really above anything I have tried. Every time I try something new I think it is ugly or rough. I use the quasi-proportional variations: Sparkle for coding and Aile for general text.</description>
    </item>
    
    <item>
      <title>Finance data in python</title>
      <link>https://nasseralkmim.github.io/notes/finace-python/</link>
      <pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/finace-python/</guid>
      <description>Introdução   Usar biblioteca yahooquery pois parece ser mais completa e melhor que yfinance.
import yahooquery as yf import pandas as pd pd.options.display.float_format = &amp;#39;{:,.2f}&amp;#39;.format import matplotlib import matplotlib.pyplot as plt matplotlib.style.use(&amp;#39;seaborn&amp;#39;)    Preço em tempo real  ticker = yf.Ticker(&amp;#39;EGIE3.SA&amp;#39;) print(ticker.quotes[&amp;#39;EGIE3.SA&amp;#39;][&amp;#39;bid&amp;#39;])  44.13    Histórico da cotação  ticker.history(period=&amp;#39;max&amp;#39;).close.plot(ylabel=&amp;#39;price R$&amp;#39;, xlabel=&amp;#39;date&amp;#39;) ticker.history(start=&amp;#39;2018-09-15&amp;#39;, end=&amp;#39;2018-09-18&amp;#39;).close.plot(ylabel=&amp;#39;price R$&amp;#39;, xlabel=&amp;#39;date&amp;#39;)    Informação sobre empresa  print(ticker.asset_profile)  {&amp;#39;EGIE3.</description>
    </item>
    
    <item>
      <title>Principles for note taking</title>
      <link>https://nasseralkmim.github.io/notes/principles-for-note-taking/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/principles-for-note-taking/</guid>
      <description>Principles    be consistent
  be concise
  drawing &amp;gt; text
    Be consistent   Use the same letter size, grids help. Avoid random curvy arrows, use straight ones.
  Be concise   I use what I call: layers of knowledge. You start on the left margin with a topic. Then, your dissect the topic from big ideas to small ideais.</description>
    </item>
    
    <item>
      <title>Difference between risk and uncertainty</title>
      <link>https://nasseralkmim.github.io/notes/risk-and-uncertainty/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/risk-and-uncertainty/</guid>
      <description>I was watching this lecture from professor Andrew Loo and he presented a compelling analogy to understand the difference between risk and uncertainty.
 The analogy goes as follows:
  urn A with 50 red balls and 50 black balls, pick a color and draw, if you draw your color you win $10,000.
  urn B with unknown quantities, pick a color and draw, same prize.
  The question is how much you are willing to bet?</description>
    </item>
    
    <item>
      <title>2020 Books review</title>
      <link>https://nasseralkmim.github.io/notes/books-2020/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/books-2020/</guid>
      <description>Books list    Kafka on the shore  Murakami escreve bem, não sou especialista em romances mas a forma como ele leva a narrativa realmente é cativante e te prende. Esse é o segundo livro que leio desse autor, e fica claro uma tendência na relação do autor com arte em geral. É muito interessante ver como a erudição do autor é projetada nós personagens quando eles discutem alguma peça musical ou literária.</description>
    </item>
    
    <item>
      <title>Extrator de dividendos</title>
      <link>https://nasseralkmim.github.io/notes/extrator-dividendos/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/extrator-dividendos/</guid>
      <description>Objetivo   Dado uma série de trades, saber quanto de dividendo foi recebido até então, separado por valores mensais.
   Resultado  Antecipando o resultado do artigo. Se quiser acompanhar a lógica de solução o restante do texto mostra o processo.
Input  trade_data = pd.read_csv(&amp;#39;trade_data.csv&amp;#39;, sep=&amp;#39;;&amp;#39;, header=None) print(trade_data)  0 1 2 3 4 0 20-07-2020 buy MGLU3 10 50,5 1 29-07-2020 buy MGLU3 30 60 2 30-07-2020 sell ITSA4 15 12 3 11-12-2019 buy MGLU3 50 10 4 19-02-2020 buy ITSA4 20 11 5 29-05-2020 buy ITSA4 25 10    Processar as negociações  trades = process_trades(trade_data_file=&amp;#39;trade_data.</description>
    </item>
    
    <item>
      <title>Monetary policy and lender of last resort</title>
      <link>https://nasseralkmim.github.io/notes/fed-monetary-mechanism/</link>
      <pubDate>Sun, 13 Dec 2020 20:08:58 -0300</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/fed-monetary-mechanism/</guid>
      <description>Traditional MP  FED  FED uses its reserves (liabilities) to affect the Federal Funds Rate (FFR), short term interest rate.
 If the FED reduces reserves, buying T-Bills in the open market operations, it affects the FFR upwards.
  Money Market dealers  Money market (MM) dealers are directly affected because they borrow short (overnight) and lend in term (3 months).
 If the financing cost increases, the MM dealers also push the term price upwards.</description>
    </item>
    
    <item>
      <title>Topic modeling</title>
      <link>https://nasseralkmim.github.io/notes/topic_modelig/</link>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/topic_modelig/</guid>
      <description>Introduction  Topic modeling is a form of semantic analysis, a step forwarding finding meaning from word counts. This analysis allows discovery of document topic without trainig data. It involves counting words and grouping similar word patterns to describe the data.
  Latent Dirichlet Allocation   Latent Dirichlet Allocation (LDA) is one topic modeling technique. It can infer the probability distribution of words for each topic, characterizing it.</description>
    </item>
    
    <item>
      <title>NLP with Python</title>
      <link>https://nasseralkmim.github.io/notes/nlp-with-python/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/nlp-with-python/</guid>
      <description>Introduction  This is an attempt to compile different sources of informations about Natural Language processing with python.
  Techiniques used in NLP  Tokenization  Converts text into segments (n-grams) that could represent a word, two words or more. During this step, usually it is performed some kind of vocabulary reduction such as normalization, stemming, lemmatization and removing stop words.
Tools    NLTK: string processing library, built by academics.</description>
    </item>
    
    <item>
      <title>Text processing with spaCy</title>
      <link>https://nasseralkmim.github.io/notes/text-processing-with-spacy/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/text-processing-with-spacy/</guid>
      <description>Introduction   spaCy is a library for Natural Language Processing (NLP) in python. It offers multiple solutions for text processing such as tokenization, named entity recognition, word vectors, part of speech tagging. The alternative is the library NLTK which seems to be used mostly in academia whereas spaCy is recommended for production use.
  Load the language model  We need to download the models for the language with python -m spacy download model-name.</description>
    </item>
    
    <item>
      <title>Question classifier preprocessing</title>
      <link>https://nasseralkmim.github.io/notes/question-classifier/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/question-classifier/</guid>
      <description>Introduction   An example from the book by Aman Kedia. About label encoding.
  Loading data  import pandas as pd data = open(&amp;#34;train_1000-label.txt&amp;#34;, &amp;#39;r&amp;#39;) train_raw = pd.DataFrame(data.readlines(), columns=[&amp;#39;data&amp;#39;]) print(train_raw.head())  data 0 DESC:manner How did serfdom develop in and the... 1 ENTY:cremat What films featured the character ... 2 DESC:manner How can I find a list of celebriti... 3 ENTY:animal What fowl grabs the spotlight afte... 4 ABBR:exp What is the full form of .</description>
    </item>
    
    <item>
      <title>Sentiment analysis on IMDB dataset</title>
      <link>https://nasseralkmim.github.io/notes/sentiment-analysis/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/sentiment-analysis/</guid>
      <description>Introduction   This is as exemple from the excellent book by François Chollet on deep learning. My idea here is to further detail the explanation with the code output, which the book does not contain. And since tensorflow 2.0 was released, I will be using tf.keras instead.
 The goal of this example is
 The steps are
  Load data   Load imdb data from keras datasets.</description>
    </item>
    
    <item>
      <title>First post in HUGO</title>
      <link>https://nasseralkmim.github.io/notes/first-hugo-post/</link>
      <pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/first-hugo-post/</guid>
      <description>Introduction  Meta post about how I do it. I&amp;#39;m using org-mode inside emacs and Hugo.
  Images from URL  Use the html export block from org mode. In order to override the theme css for images display I manually inserted the html with a different style=&amp;#34;display: revert; max-width: fit-content;&amp;#34;. (this depends on the theme you choose)
  Graphs from interactive code blocks saved on /static/images1   Using emacs-jupyter together with org-mode babel.</description>
    </item>
    
    <item>
      <title>2019 Books review</title>
      <link>https://nasseralkmim.github.io/notes/books2019/</link>
      <pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/books2019/</guid>
      <description>Books list    Never let me go  Ficção sobre uma realidade distópica onde nós criamos clones para suprir nossas necessidades de órgãos. Mas quem são esses clones? A narrativa é contada por um deles. Cheio de mistérios e revelações, o livro te prende até o fim. Nas entrelinhas é um livro sobre questões existênciais e como aceitar o invevitavel. &amp;#34;Ishiguro wanted us to &amp;#39;know without knowing&amp;#39;&amp;#34;</description>
    </item>
    
    <item>
      <title>2018 Books review</title>
      <link>https://nasseralkmim.github.io/notes/books2018/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/books2018/</guid>
      <description>Books list    The Dao of capital  Esse livro mostra a estratégia de investimento do Mark Spitznagel. Ele utiliza de operações assimétricas para ter um grande upside em face à eventos inesperados (ou eventos esperados e previsíveis mas que não se sabe quando ocorrerão). No decorrer do livro ele explica a estratégia adotada com exemplos das coníferas
  The 4-hour workweek  Excelente livro para remoldar a forma de pensar o tradicional caminho corporativista.</description>
    </item>
    
    <item>
      <title>2017 Books review</title>
      <link>https://nasseralkmim.github.io/notes/books2017/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/books2017/</guid>
      <description>Books list    Antifragile  Livro essencial para todos. A maneira como o Taleb escreve é muito interessante e me agrada muito. O livro te explica como certas circunstâncias podem ser favorecidas quando um agente stressor ocorre. Essa ideia é aplicada em finanças e também nos mais diversos expectros da vida. Meu capitulo favorito foi sobre &amp;#34;ensinando pássaros a voar&amp;#34; que trata a ciência, pelo menos a ciência do séc XIX, como uma atividade assimétrica, ou seja, através do &amp;#34;thinkering&amp;#34;, ou experimentos que custam pouco (pequeno downside) mas que tem grande potencial (upside), a ciência era feita de forma eficiênte de baixo para cima (bottom up).</description>
    </item>
    
    <item>
      <title>Favorite plots and graphs</title>
      <link>https://nasseralkmim.github.io/notes/favorite-plots/</link>
      <pubDate>Sat, 20 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/favorite-plots/</guid>
      <description>Here I&amp;#39;m going to compile a list of my favorite graphs and plots.
BIS Bulletins   As of now, 2020, this are my favorite asthetic. The shaded background, no border, consistent line thickness and colors.   Old preferences  Eckardt 2011  This is one seems to be standard matplotlib plot. It is from a paper (Unger ad Eckardt 2011)
  Toro 2016  I think this one was made with TiKz library.</description>
    </item>
    
    <item>
      <title>Linear algebra change of basis explained using Python</title>
      <link>https://nasseralkmim.github.io/notes/change-of-basis/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/change-of-basis/</guid>
      <description>Motivation   I&amp;#39;m always forgetting about the intuition behind the change of basis in linear algebra. There is a very nice video explaining it on Youtube, but I want the explanation in text format so I can easily refer too when in doubt.
  Change of basis   Let&amp;#39;s say we have two sets of basis vector $\color{blue}{\boldsymbol{b_{i}}}$ and $\color{red}{\boldsymbol{\beta_{i}}}$. The set $\color{blue}{\boldsymbol{b_{i}}}$ defines the original system, the one we start with, and the set $\color{red}{\boldsymbol{\beta_{i}}}$ the transformed system.</description>
    </item>
    
    <item>
      <title>How I manage academic sources in emacs</title>
      <link>https://nasseralkmim.github.io/notes/bibliography-management/</link>
      <pubDate>Thu, 23 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/bibliography-management/</guid>
      <description>Introduction   In this post I will go over my workflow for managing academic resources and seamless add citation into a $\LaTeX$ file. Usually this process is boring since you have to add a source into your .bib file, then insert the citation with the bibtex key into your latex to generate the references section. This process is independent of your .pdf source, so you can add citation for source that you have physically.</description>
    </item>
    
    <item>
      <title>OOP for an Extensible FEM code</title>
      <link>https://nasseralkmim.github.io/notes/oop-fem/</link>
      <pubDate>Thu, 18 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/oop-fem/</guid>
      <description>Introduction   After a solid 2 days of research, multiple articles and thesis, I figured that the whole OOP paradigm might be the best alternative to an extensible fem code.
 The thing is: I need something simple enough so people can learn how the code works only with basic knowledge of the language and the theory.
  The current framework  Top level description   User input as the Mesh file and the Problem parameters.</description>
    </item>
    
    <item>
      <title>Lagrangian duality example using ob-python</title>
      <link>https://nasseralkmim.github.io/notes/lagrange-duality/</link>
      <pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/lagrange-duality/</guid>
      <description>Introduction   This is an example extracted from &amp;#34;An Introduction to Structural Optimization&amp;#34;, I also added a few extra images to clarify some points.
  What is Lagrangian duality?
  Why is it called Lagrangian duality?
    Problem statement   We want to optimize the following convex and separable problem,
 \begin{equation} \mathbb{(P)} \; \begin{cases} \min \limits_{x_1, x_2} (x_1 -3)^2 + (x_2 + 1)^2 \\ s.</description>
    </item>
    
    <item>
      <title>Lagrange multipliers example</title>
      <link>https://nasseralkmim.github.io/notes/lagrange-multiplier/</link>
      <pubDate>Thu, 03 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://nasseralkmim.github.io/notes/lagrange-multiplier/</guid>
      <description>Introduction   This is an experiment with org-mode and ob-python that simulates a notebok environment which mix code, text and math (latex). I am going through example presented in John Kitchin work, which is extremely useful for someone planning on start coding in python for science.  I take no credit from the material presented here, it is a copy with a new format. I am particularly interested in this subject due an ongoing project in structural optimization therefore I will put an effort on detailing some of the method derivation.</description>
    </item>
    
  </channel>
</rss>
